//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/__Scripts/Main/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace KK
{
    public partial class @InputMaster : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputMaster()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""fd02f2a3-51c4-4c09-aafc-ed98aea841a3"",
            ""actions"": [
                {
                    ""name"": ""Run"",
                    ""type"": ""Value"",
                    ""id"": ""ed918d61-f760-4f42-b056-551e60d9f6f1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""StickDeadzone"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""0d64267b-da01-4c2a-abe9-2b58c2bb019d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""a3a77895-0276-4965-96d1-d3123a27d397"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""c3601769-e771-4dc0-a268-fa18af09e6fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Arrows"",
                    ""id"": ""0ce01b1b-bed3-4502-8d59-f8f703e6c630"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""908d52d6-750d-4306-9692-88f02ae0ee95"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard/Mouse"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""892c5fc0-a7e8-4cfe-b176-6a2787f118e0"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard/Mouse"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a082cfe6-137e-439a-b02e-667647b3eb45"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard/Mouse"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5ca72c3d-42e2-448a-9940-06ffa54b0d1d"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard/Mouse"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""aed7b441-a9dc-4ff1-9d95-d318e1d3fd60"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""aa5b663f-c88d-476f-a453-36b98cf0fd57"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard/Mouse"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e5e2fd5a-5c91-4765-91db-5aad78ef0b76"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard/Mouse"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""439779c5-d63e-49bc-816c-f6f938265f85"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard/Mouse"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""006aff9e-afd1-48de-83c5-577dc4ecb4e0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard/Mouse"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""cc1b698a-0b27-4d23-91e3-e81d16304d9e"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8a6c43d-8676-4a5c-8c4b-10a8be7d608f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard/Mouse"",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a3dd4e3-2bb8-4052-9a11-bc5785698550"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""feb9f5b9-31fe-48fd-a374-eaec21857dfa"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""950f3ea0-1f1f-4e4f-bdbb-c6714c2a6927"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard/Mouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e24396cc-7561-4941-9941-c03f92d07644"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard/Mouse"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82e88afd-8a88-45df-9691-d106ec2a3823"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Items"",
            ""id"": ""2b85ec95-3300-4bf7-8950-b06d995030b4"",
            ""actions"": [
                {
                    ""name"": ""Equip"",
                    ""type"": ""Button"",
                    ""id"": ""9b56a527-148c-42d2-8d89-d94fcd4b0592"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Toss"",
                    ""type"": ""Button"",
                    ""id"": ""8d4fa09a-919d-45db-8259-87feb9807d19"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use"",
                    ""type"": ""Button"",
                    ""id"": ""5002be5b-f42a-4746-9451-505d89a6c4a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use2"",
                    ""type"": ""Button"",
                    ""id"": ""a664b6e9-0813-45fb-899f-1d267d394925"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseHold"",
                    ""type"": ""Button"",
                    ""id"": ""e9e9c3aa-967d-42d9-bc50-952ceaf84565"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use2Hold"",
                    ""type"": ""Button"",
                    ""id"": ""dd327a6b-c9e0-4e17-b31a-35b1fa621888"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""afd449df-d49a-4d59-9524-14d2cfaccd11"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard/Mouse"",
                    ""action"": ""Equip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a9569ac-dacb-4e8f-80d3-3ae04b03b8ad"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Equip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""467ae067-0b02-4d47-b664-d06efbc1dabc"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard/Mouse"",
                    ""action"": ""Toss"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e38387a-cb03-41db-a621-076903d724e7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard/Mouse"",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99b91b12-9da3-4786-8d92-8491a48a50c2"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""536e4548-ebb8-4534-85e8-c602307348ea"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Use2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""22456168-101b-4a8e-a74b-9774ac923ec9"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard/Mouse"",
                    ""action"": ""Use2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e552c3e-183e-4d3a-a922-7fed7a01a9d4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard/Mouse"",
                    ""action"": ""UseHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a8bc21f-32ce-4a8a-90bf-48884faa49e7"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""UseHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""975ea75f-7e7e-458d-9e4e-ed2232ce497f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard/Mouse"",
                    ""action"": ""Use2Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03d9e83e-61b8-4d73-9b33-f623730069b0"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Use2Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""718c5e33-8fd4-4f56-86be-5e3c5166e392"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""e3558b1e-092e-4c00-af47-189b805e4676"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenInventory"",
                    ""type"": ""Button"",
                    ""id"": ""5348aea0-8841-4e97-b5e4-5dee26e45460"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""131cb3a9-4daf-46d6-bd8d-67e5dbd27f46"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard/Mouse"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7014c6fa-f759-4e39-b7a2-094c729cc997"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ebb85562-daaa-4c88-a52c-b13d0485cfff"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard/Mouse"",
                    ""action"": ""OpenInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a139c1c-328d-490c-8f93-69a83f7a5fb2"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""OpenInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard/Mouse"",
            ""bindingGroup"": ""Keyboard/Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Movement
            m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
            m_Movement_Run = m_Movement.FindAction("Run", throwIfNotFound: true);
            m_Movement_Roll = m_Movement.FindAction("Roll", throwIfNotFound: true);
            m_Movement_Look = m_Movement.FindAction("Look", throwIfNotFound: true);
            m_Movement_Sprint = m_Movement.FindAction("Sprint", throwIfNotFound: true);
            // Items
            m_Items = asset.FindActionMap("Items", throwIfNotFound: true);
            m_Items_Equip = m_Items.FindAction("Equip", throwIfNotFound: true);
            m_Items_Toss = m_Items.FindAction("Toss", throwIfNotFound: true);
            m_Items_Use = m_Items.FindAction("Use", throwIfNotFound: true);
            m_Items_Use2 = m_Items.FindAction("Use2", throwIfNotFound: true);
            m_Items_UseHold = m_Items.FindAction("UseHold", throwIfNotFound: true);
            m_Items_Use2Hold = m_Items.FindAction("Use2Hold", throwIfNotFound: true);
            // UI
            m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
            m_UI_Pause = m_UI.FindAction("Pause", throwIfNotFound: true);
            m_UI_OpenInventory = m_UI.FindAction("OpenInventory", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Movement
        private readonly InputActionMap m_Movement;
        private IMovementActions m_MovementActionsCallbackInterface;
        private readonly InputAction m_Movement_Run;
        private readonly InputAction m_Movement_Roll;
        private readonly InputAction m_Movement_Look;
        private readonly InputAction m_Movement_Sprint;
        public struct MovementActions
        {
            private @InputMaster m_Wrapper;
            public MovementActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
            public InputAction @Run => m_Wrapper.m_Movement_Run;
            public InputAction @Roll => m_Wrapper.m_Movement_Roll;
            public InputAction @Look => m_Wrapper.m_Movement_Look;
            public InputAction @Sprint => m_Wrapper.m_Movement_Sprint;
            public InputActionMap Get() { return m_Wrapper.m_Movement; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
            public void SetCallbacks(IMovementActions instance)
            {
                if (m_Wrapper.m_MovementActionsCallbackInterface != null)
                {
                    @Run.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnRun;
                    @Run.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnRun;
                    @Run.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnRun;
                    @Roll.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnRoll;
                    @Roll.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnRoll;
                    @Roll.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnRoll;
                    @Look.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnLook;
                    @Look.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnLook;
                    @Look.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnLook;
                    @Sprint.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnSprint;
                    @Sprint.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnSprint;
                    @Sprint.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnSprint;
                }
                m_Wrapper.m_MovementActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Run.started += instance.OnRun;
                    @Run.performed += instance.OnRun;
                    @Run.canceled += instance.OnRun;
                    @Roll.started += instance.OnRoll;
                    @Roll.performed += instance.OnRoll;
                    @Roll.canceled += instance.OnRoll;
                    @Look.started += instance.OnLook;
                    @Look.performed += instance.OnLook;
                    @Look.canceled += instance.OnLook;
                    @Sprint.started += instance.OnSprint;
                    @Sprint.performed += instance.OnSprint;
                    @Sprint.canceled += instance.OnSprint;
                }
            }
        }
        public MovementActions @Movement => new MovementActions(this);

        // Items
        private readonly InputActionMap m_Items;
        private IItemsActions m_ItemsActionsCallbackInterface;
        private readonly InputAction m_Items_Equip;
        private readonly InputAction m_Items_Toss;
        private readonly InputAction m_Items_Use;
        private readonly InputAction m_Items_Use2;
        private readonly InputAction m_Items_UseHold;
        private readonly InputAction m_Items_Use2Hold;
        public struct ItemsActions
        {
            private @InputMaster m_Wrapper;
            public ItemsActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
            public InputAction @Equip => m_Wrapper.m_Items_Equip;
            public InputAction @Toss => m_Wrapper.m_Items_Toss;
            public InputAction @Use => m_Wrapper.m_Items_Use;
            public InputAction @Use2 => m_Wrapper.m_Items_Use2;
            public InputAction @UseHold => m_Wrapper.m_Items_UseHold;
            public InputAction @Use2Hold => m_Wrapper.m_Items_Use2Hold;
            public InputActionMap Get() { return m_Wrapper.m_Items; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ItemsActions set) { return set.Get(); }
            public void SetCallbacks(IItemsActions instance)
            {
                if (m_Wrapper.m_ItemsActionsCallbackInterface != null)
                {
                    @Equip.started -= m_Wrapper.m_ItemsActionsCallbackInterface.OnEquip;
                    @Equip.performed -= m_Wrapper.m_ItemsActionsCallbackInterface.OnEquip;
                    @Equip.canceled -= m_Wrapper.m_ItemsActionsCallbackInterface.OnEquip;
                    @Toss.started -= m_Wrapper.m_ItemsActionsCallbackInterface.OnToss;
                    @Toss.performed -= m_Wrapper.m_ItemsActionsCallbackInterface.OnToss;
                    @Toss.canceled -= m_Wrapper.m_ItemsActionsCallbackInterface.OnToss;
                    @Use.started -= m_Wrapper.m_ItemsActionsCallbackInterface.OnUse;
                    @Use.performed -= m_Wrapper.m_ItemsActionsCallbackInterface.OnUse;
                    @Use.canceled -= m_Wrapper.m_ItemsActionsCallbackInterface.OnUse;
                    @Use2.started -= m_Wrapper.m_ItemsActionsCallbackInterface.OnUse2;
                    @Use2.performed -= m_Wrapper.m_ItemsActionsCallbackInterface.OnUse2;
                    @Use2.canceled -= m_Wrapper.m_ItemsActionsCallbackInterface.OnUse2;
                    @UseHold.started -= m_Wrapper.m_ItemsActionsCallbackInterface.OnUseHold;
                    @UseHold.performed -= m_Wrapper.m_ItemsActionsCallbackInterface.OnUseHold;
                    @UseHold.canceled -= m_Wrapper.m_ItemsActionsCallbackInterface.OnUseHold;
                    @Use2Hold.started -= m_Wrapper.m_ItemsActionsCallbackInterface.OnUse2Hold;
                    @Use2Hold.performed -= m_Wrapper.m_ItemsActionsCallbackInterface.OnUse2Hold;
                    @Use2Hold.canceled -= m_Wrapper.m_ItemsActionsCallbackInterface.OnUse2Hold;
                }
                m_Wrapper.m_ItemsActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Equip.started += instance.OnEquip;
                    @Equip.performed += instance.OnEquip;
                    @Equip.canceled += instance.OnEquip;
                    @Toss.started += instance.OnToss;
                    @Toss.performed += instance.OnToss;
                    @Toss.canceled += instance.OnToss;
                    @Use.started += instance.OnUse;
                    @Use.performed += instance.OnUse;
                    @Use.canceled += instance.OnUse;
                    @Use2.started += instance.OnUse2;
                    @Use2.performed += instance.OnUse2;
                    @Use2.canceled += instance.OnUse2;
                    @UseHold.started += instance.OnUseHold;
                    @UseHold.performed += instance.OnUseHold;
                    @UseHold.canceled += instance.OnUseHold;
                    @Use2Hold.started += instance.OnUse2Hold;
                    @Use2Hold.performed += instance.OnUse2Hold;
                    @Use2Hold.canceled += instance.OnUse2Hold;
                }
            }
        }
        public ItemsActions @Items => new ItemsActions(this);

        // UI
        private readonly InputActionMap m_UI;
        private IUIActions m_UIActionsCallbackInterface;
        private readonly InputAction m_UI_Pause;
        private readonly InputAction m_UI_OpenInventory;
        public struct UIActions
        {
            private @InputMaster m_Wrapper;
            public UIActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
            public InputAction @Pause => m_Wrapper.m_UI_Pause;
            public InputAction @OpenInventory => m_Wrapper.m_UI_OpenInventory;
            public InputActionMap Get() { return m_Wrapper.m_UI; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
            public void SetCallbacks(IUIActions instance)
            {
                if (m_Wrapper.m_UIActionsCallbackInterface != null)
                {
                    @Pause.started -= m_Wrapper.m_UIActionsCallbackInterface.OnPause;
                    @Pause.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnPause;
                    @Pause.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnPause;
                    @OpenInventory.started -= m_Wrapper.m_UIActionsCallbackInterface.OnOpenInventory;
                    @OpenInventory.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnOpenInventory;
                    @OpenInventory.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnOpenInventory;
                }
                m_Wrapper.m_UIActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Pause.started += instance.OnPause;
                    @Pause.performed += instance.OnPause;
                    @Pause.canceled += instance.OnPause;
                    @OpenInventory.started += instance.OnOpenInventory;
                    @OpenInventory.performed += instance.OnOpenInventory;
                    @OpenInventory.canceled += instance.OnOpenInventory;
                }
            }
        }
        public UIActions @UI => new UIActions(this);
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        private int m_KeyboardMouseSchemeIndex = -1;
        public InputControlScheme KeyboardMouseScheme
        {
            get
            {
                if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard/Mouse");
                return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
            }
        }
        public interface IMovementActions
        {
            void OnRun(InputAction.CallbackContext context);
            void OnRoll(InputAction.CallbackContext context);
            void OnLook(InputAction.CallbackContext context);
            void OnSprint(InputAction.CallbackContext context);
        }
        public interface IItemsActions
        {
            void OnEquip(InputAction.CallbackContext context);
            void OnToss(InputAction.CallbackContext context);
            void OnUse(InputAction.CallbackContext context);
            void OnUse2(InputAction.CallbackContext context);
            void OnUseHold(InputAction.CallbackContext context);
            void OnUse2Hold(InputAction.CallbackContext context);
        }
        public interface IUIActions
        {
            void OnPause(InputAction.CallbackContext context);
            void OnOpenInventory(InputAction.CallbackContext context);
        }
    }
}
